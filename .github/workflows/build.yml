name: Build, Test, and Publish Wheels

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10"]  # Adjust as needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install cibuildwheel and scikit-build
        run: pip install cibuildwheel scikit-build

      # Install Boost and CMake
      - name: Install Boost and CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libboost-python-dev libboost-graph-dev cmake

      - name: Install Boost and CMake (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install boost cmake python@3.10 boost-python3

      - name: Install Boost and CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install boost-msvc
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

      # Install GCC 13 on Linux
      - name: Install GCC 13 (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install -y g++-13

      # Set GCC 13 as the default compiler on Linux
      - name: Set GCC 13 as default (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 60
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 60
          gcc --version
          g++ --version


      # List Package Directory Contents
      - name: List Package Directory Contents
        run: |
          echo "Listing contents of the package directory:"
          ls -R src/vrp_solver_ignore
        shell: bash
        if: matrix.os != 'windows-latest'


      # Inspect the Extension Module
      - name: Inspect Extension Module
        run: |
          echo "Inspecting cppWrapper.so with otool:"
          otool -L src/vrp_solver_ignore/cppWrapper.so || echo "otool not found or cppWrapper.so missing."
        shell: bash
        if: matrix.os != 'windows-latest'

      # Inspect the Shared Library Symbols
      - name: Inspect Shared Library Symbols
        run: |
          echo "Inspecting symbols in cppWrapper.so:"
          nm src/vrp_solver_ignore/cppWrapper.so | grep PYBIND11_MODULE || echo "No PYBIND11_MODULE found."
        shell: bash
        if: matrix.os != 'windows-latest'

      # Build wheels with maximum verbosity
      - name: Build wheels
        run: |
          CIBW_BUILD_VERBOSITY=1 cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD_VERBOSITY: 1  #

      # Upload wheels as artifact
      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: wheelhouse/*.whl

  test_wheels:
    needs: build_wheels
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-ubuntu-latest-py*
          path: wheelhouse

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install wheel
        run: pip install wheelhouse/*.whl

      - name: Install test dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest tests/

  publish_wheels:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-*
          path: wheelhouse

      - name: Install twine
        run: pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload wheelhouse/*.whl
