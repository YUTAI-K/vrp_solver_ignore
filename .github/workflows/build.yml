name: Build, Test, and Publish Wheels

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]
  release:
    types: [published]

jobs:
  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: ["3.10"]  # Adjust as needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ matrix.python-version }}

      - name: Install cibuildwheel
        run: pip install cibuildwheel

      # # Install Boost and CMake (macOS)
      # - name: Install Boost and CMake (macOS)
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     brew install boost cmake python@3.10 boost-python3


      # # Build C++ extension (macOS)
      # - name: Build C++ extension (macOS)
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     chmod +x scripts/build.sh
      #     ./scripts/build.sh
      #   shell: bash


      # Validate setup.py Packaging
      - name: Validate setup.py Packaging
        run: |
          python setup.py check --metadata --restructuredtext
        shell: bash

      # # Inspect the Extension Module (macOS)
      # - name: Inspect Extension Module
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     echo "Inspecting cppWrapper.so with otool:"
      #     otool -L src/vrp_solver_ignore/cppWrapper.so || echo "otool not found or cppWrapper.so missing."
      #   shell: bash

      # Set MACOSX_DEPLOYMENT_TARGET (macOS)
      - name: Set MACOSX_DEPLOYMENT_TARGET
        if: matrix.os == 'macos-latest'
        run: echo 'MACOSX_DEPLOYMENT_TARGET=14.0' >> $GITHUB_ENV

      # Build wheels with maximum verbosity
      - name: Build wheels with cibuildwheel
        run: |
          cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD_VERBOSITY: 0
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_BEFORE_BUILD_LINUX: |
            # Install build tools and dependencies
            yum install -y bzip2-devel zlib-devel xz-devel make gcc gcc-c++ wget

            # Build Boost from source
            wget -O boost.tar.gz https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz
            tar -xzf boost.tar.gz
            cd boost_1_82_0
            ./bootstrap.sh --with-libraries=python,graph --with-python=python3
            ./b2 install --prefix=/usr/local --with-python --with-graph link=shared
            cd ..

            # Ensure the Boost libraries are found
            export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"

            # Set environment variables for CMake to find Python 3
            export Python3_ROOT_DIR=$(python -c "import sys; print(sys.prefix)")
            export Python3_EXECUTABLE=$(which python)
            export Python3_INCLUDE_DIR=$(python -c "from sysconfig import get_paths; print(get_paths()['include'])")
            export Python3_LIBRARY=$(python -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR') + '/libpython' + sysconfig.get_config_var('LDVERSION') + '.so')")

            export CMAKE_PREFIX_PATH="$Python3_ROOT_DIR:$CMAKE_PREFIX_PATH"

            # Build your C++ extension
            chmod +x scripts/build.sh
            ./scripts/build.sh
          CIBW_BEFORE_BUILD_WINDOWS: |
            
            choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'

            
            git clone https://github.com/microsoft/vcpkg.git
            .\vcpkg\bootstrap-vcpkg.bat
            .\vcpkg\vcpkg.exe install boost-python boost-graph

            
            set VCPKG_ROOT=%CD%\vcpkg

            
            scripts\build.bat
          CIBW_BEFORE_BUILD_MACOS: |
            # Install dependencies
            brew install boost cmake boost-python3

            # Set environment variables for Python
            export Python3_ROOT_DIR=$(python3 -c "import sys; print(sys.prefix)")
            export Python3_EXECUTABLE=$(which python3)
            export Python3_INCLUDE_DIR=$(python3 -c "from sysconfig import get_paths; print(get_paths()['include'])")
            export Python3_LIBRARY=$(python3-config --prefix)/Python

            # Build your C++ extension
            chmod +x scripts/build.sh
            ./scripts/build.sh


      # Upload wheels as artifact
      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl

  test_wheels:
    needs: build_wheels
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10"]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install wheel
        run: |
          pip install --no-index --find-links wheelhouse vrp_solver_ignore
        shell: bash
        if: runner.os != 'Windows'

      - name: Install wheel (Windows)
        run: |
          pip install --no-index --find-links wheelhouse vrp_solver_ignore
        shell: cmd
        if: runner.os == 'Windows'

      - name: Install test dependencies
        run: pip install -r requirements.txt

      # Run tests
      - name: Run tests
        run: pytest tests/
        shell: bash
        if: runner.os != 'Windows'

      - name: Run tests (Windows)
        run: pytest tests
        shell: cmd
        if: runner.os == 'Windows'

  publish_wheels:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-*
          path: wheelhouse

      - name: Install twine
        run: pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload wheelhouse/*.whl
